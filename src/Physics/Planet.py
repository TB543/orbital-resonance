from numpy import array
from GUI.StateManager import StateManger
from pygame.mixer import Sound


class Planet:
    """
    the class to control a celestial body

    todo David use this class for calculating the physics of the planets
        the GUI will use the position, radius and color to draw it to the display
        the tag will be automatically generated by the GUI to keep track of the shape that is drawn
        feel free to add more attributes/functions as needed for physics
    """

    def __init__(self, period: float, radius: float, color: str, sound_path=None, offset=0):
        """
        creates the planet with the given attributes

        :param period: how long it takes the planet to revolve
        :param radius: the radius of the planet
        :param color: the color of the planet
        :param sound_path: the file path of to the sound to play
        """

        self.period = period
        self.offset = offset
        self.orbital_radius = (period**(2/3)) * 500
        self.position = array([0.0, -round(self.orbital_radius)])
        self._radius = radius
        self._color = color
        self.tag = None
        self.sound_path = sound_path
        self.sound = Sound(sound_path) if sound_path else None
        self.state_manager: StateManger = None  # will be assigned when added by to a planet manager

    def __getstate__(self):
        """
        gets the state of the planet to serialize when saving

        :return: the state of the planet excluding the play sound file object
        """

        state = self.__dict__.copy()
        del state["sound"]
        return state

    @staticmethod
    def set_value_generator(attribute: str):
        """
        generates a set value function for a given attribute

        :param attribute: the attribute of the class to update

        :return: the function used to update that attribute
        """

        def set_value(self, value):
            """
            handles when the user updates a value
                --> updates the value in the class
                --> adds the state update to the state manager

            :param self: the instance of the class to update
            :param value: the value of the class to update

            :return the function to redo the action
            """

            def state_undo(old=getattr(self, attribute)):
                """
                the function to handle the undo action

                :param old: the old value of the attribute

                :return: the function for the redo action
                """

                setattr(self, attribute, old)
                return lambda: setattr(self, attribute, value)

            self.state_manager.add_undo(state_undo)
            setattr(self, attribute, value)

        return set_value

    @staticmethod
    def get_value_generator(attribute: str):
        """
        generates a get value function for a given attribute

        :param attribute: the attribute of the class to get

        :return: the function used to get that attribute
        """

        def get_value(self):
            """
            gets a value of the class

            :param self: the instance of the class to get the value of

            :return: the value of the class specified by the generator function
            """

            return getattr(self, attribute)

        return get_value

    # sets class attributes to properties so state can be stored in state manager  todo add distance from sun update
    color = property(get_value_generator("_color"), set_value_generator("_color"))
    radius = property(get_value_generator("_radius"), set_value_generator("_radius"))


# p = Planet(1, 1, "green")
# p.state_manager = StateManger()
# print(p.color)
# p.color = "orange"
# print(p.color)
# p.state_manager.undo()
# print(p.color)
# p.state_manager.redo()
# print(p.color)
